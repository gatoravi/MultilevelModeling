library(foreign)
p1 <- read.dta("dat/pollution.dta")
head(p1)
ggplot(t) + geom_point(aes(x = NOX, y = MORT))
require(ggplot2)
ggplot(t) + geom_point(aes(x = NOX, y = MORT))
summary(t)
ggplot(p1) + geom_point(aes(x = NOX, y = MORT))
head(p1)
ggplot(p1) + geom_point(aes(x = nox, y = mort))
ggsave("pollution_scatterplot.png")
m1 <- lm(mort ~ nox, data = p1)
summary(m1)
ggplot(p1) + geom_point(aes(x = nox, y = mort)) 
m1$residuals
plot(m1$fitted.values, m1$residuals)
plot(m1$fitted.values, m1$residuals, title = "Residual plot")
plot(m1$fitted.values, m1$residuals, main = "Residual plot")
png("p1_residuals.png")
plot(m1$fitted.values, m1$residuals, main = "Residual plot - after transformation")
dev.off()
ls()
head(p1)
p1$lognox <- log10(p1$nox)
m2 <- lm(mort ~ lognox, data = p1)
summary(m2)
plot(m2$fitted.values, m2$residuals, main = "Residual plot - after transformation")
ggplot(p1) + geom_point(aes(x = lognox, y = mort)) 
ggplot(p1) + geom_point(aes(x = lognox, y = mort)) + ggtitle("scatterplot after tranformation")
ggsave("pollution_scatterplot2.png")
png("p1_residuals2.png"
)
plot(m2$fitted.values, m2$residuals, main = "Residual plot - after transformation")
dev.off()
summary(m2
)
summary(m1)
summary(m2)
plot(log10(p1$mort), p1$nox)
summary(p1$mort
)
summary(m2)
head(p1)
plot(so2, mort)
plot(p1$so2, p1$mort)
plot(log10(p1$hc, p1$mort)
plot(log10(p1$so2), p1$mort)
plot(p1$so2, p1$mort)
plot(log10(p1$so2), p1$mort)
m2 <- lm(mort ~ lognox + logso2 + loghc, data = p1)
p1$loghc <- log10(hc)
p1$loghc <- log10(p1$hc)
head)p1)
head(p1)
p1$logso2 <- log10(p1$so2)
m2 <- lm(mort ~ lognox + logso2 + hc, data = p1)
plot(
m3 <- lm(mort ~ lognox + so2 + loghc, data = p1)
summary(m3)
plot(log10(p1$hc), p1$mort)
m4 <- lm(mort ~ lognox + logso2 + hc, data = p1)
summary(m4)
m4 <- lm(mort ~ logso2 + hc, data = p1)
summary(m4)
plot(log10(p1$hc), p1$mort)
plot(sqrt(p1$hc), p1$mort)
plot(loghc, m3$mort)
plot(p1$loghc, p1$mort)
beta.hat <- coef (m3)
curve (cbind (1, mean(lognox), logso2, mean(loghc)) %*% beta.hat, col="black", add=TRUE)
attach(p1)
curve (cbind (1, mean(lognox), logso2, mean(loghc)) %*% beta.hat, col="black", add=TRUE)
beta.hat
m3 <- lm(mort ~ lognox + logso2 + loghc, data = p1)
curve (cbind (1, mean(lognox), logso2, mean(loghc)) %*% beta.hat, col="black", add=TRUE)
curve (cbind (1, mean(lognox), logso2, mean(loghc)) %*% beta.hat, col="black", add=TRUE)
beta.hat
nrow(p1)
p1_first30 <- p1[1:30, ]
p1_last30 <- p1[31:60, ]
nrow(p1_last30)
m3 <- lm(mort ~ lognox + logso2 + loghc, data = p1_first30)
summary(m3)
predict(m3, p1_last30)
plot(p1_last30$mort, predict(m3, p1_last30))
plot(p1_last30$mort, predict(m3, p1_last30), xlab = "observed", ylab = "predicted")
plot(p1_last30$mort, predict(m3, p1_last30), xlab = "observed", ylab = "predicted", main = "test")
plot(p1_last30$mort, predict(m3, p1_last30), xlab = "observed", ylab = "predicted", main = "Model-fitting")
png("p1_modelfit.png")
plot(p1_last30$mort, predict(m3, p1_last30), xlab = "observed", ylab = "predicted", main = "Model-fitting")
dev.off()
cor(p1_last30$mort, predict(m3, p1_last30))
cor(p1_last30$mort, predict(m3, p1_last30), method="spearman")
 library ("foreign")
     rb <- read.dta ("dat/risky_behaviours.dta"
)
     rb <- read.dta ("dat/risky_behaviors.dta"
)
head(rb)
m1 <- glm(fupacts ~ women_alone, family="poisson", data = rb)
summary(m1)
yhat <- predict(m1)
head(yhat)
len(yhat)
length(yhat)
nrow(rb)
z <- fupacts - yhat
attach(rb)
z <- (fupacts - yhat
)/sqrt(yhat)
z
sum(z^2)/(nrow(rb) - 1)
head(m1)
head(rb)
m2 <- glm(fupacts ~ women_alone + bs_hiv + bupacts + couples, family="poisson", data = rb)
summary(m2)
yhat <- predict(m2)
z2 <- (fupacts - yhat)/sqrt(yhat)
sum(z2^2)/(nrow(rb) - 1)
yhat <- predict(m2, type = "response")
z2 <- (fupacts - yhat)/sqrt(yhat)
sum(z2^2)/(nrow(rb) - 1)
yhat <- predict(m1, type = "response")
z2 <- (fupacts - yhat)/sqrt(yhat)
sum(z2^2)/(nrow(rb) - 1)
m3 <- glm(fupacts ~ women_alone + bs_hiv + bupacts + couples, family="quasipoisson", data = rb)
summary(m3)
iq.data <- read.dta ("dat/child.iq.dta")
require(foreign)
iq.data <- read.dta ("dat/child.iq.dta")
model1 <- lm(ppvt ~ momage, data = iq.data)
plot(iq.data$momage, iq.data$ppvt)
lines(iq.data$momage, model1$fitted.values)
png('q1_m1.png')
plot(iq.data$momage, iq.data$ppvt)
lines(iq.data$momage, model1$fitted.values)
dev.off()
plot(model1)
par(mfrow=c(2,2))
plot(model1)
par(mfrow=c(2,2))
plot(model1)
png('q1_model1_all.png')
par(mfrow=c(2,2))
plot(model1)
dev.off()
head(iq.data)
model2 <- lm(ppvt ~ momage + educ_cat, data = iq.data)
png("q1_model2.png")
par(mfrow=c(2,2))
plot(model2)
dev.off()
plot(model2)
a
summary(model2)
summary(model1)
model3 <- lm(ppvt ~ momage + educ_cat + hs_status:momage, data = iq.data)
iq.data$hs_status <- as.numeric(!(iq.data$educ_cat == 1)
)
model3 <- lm(ppvt ~ momage + educ_cat + hs_status:momage, data = iq.data)
summary(model3)
colors <- ifelse(iq$hs_status == 1, "green", "red")
colors <- ifelse(iq.data$hs_status == 1, "green", "red")
 plot(iq.data$momage, iq.data$ppvt, ylab="child score", col=colors, pch= 15)
curve(cbind(1, 1, x, 1 * x) %*% coef(model3), add=TRUE, col="green")
 curve(cbind(1, 0, x, 0 * x) %*% coef(model3), add=TRUE, col="red")
head(x)
coef(model3)
par(mfrow=c(1,1))
png("q1_partc.png")
 plot(iq.data$momage, iq.data$ppvt, ylab="child score", col=colors, pch= 15)
curve(cbind(1, 1, x, 1 * x) %*% coef(model3), add=TRUE, col="green")
 curve(cbind(1, 0, x, 0 * x) %*% coef(model3), add=TRUE, col="red")
dev.off()
child.iq.first <- child.iq[1:200, ]
iq.data.first <- iq.data[1:200, ]
 iq.data.second <- iq.data[200:400, ]
model3 <- lm(ppvt ~ momage + educ_cat + hs_status:momage, data = iq.data)
> summary(model3)
model4 <- lm(ppvt ~ momage + educ_cat + hs_status:momage, data = iq.data.first)
second_predicted <- predict(model4, iq.data.second)
plot(iq.data.second$ppvt, second_predicted)
summary(model4)
model4 <- lm(ppvt ~ momage + educ_cat, data = iq.data.first)
second_predicted <- predict(model4, iq.data.second)
plot(iq.data.second$ppvt, second_predicted)
plot(iq.data.second$ppvt, second_predicted, xlab = "observed", ylab = "predicted")
cor(iq.data.second$ppvt, second_predicted)
png("q1_partd.png")
plot(iq.data.second$ppvt, second_predicted, xlab = "observed", ylab = "predicted")
dev.off()
bc <- read.table("dat/wdbc.data")
head(bc)
bc <- read.table("dat/wdbc.data", sep = ",")
head(bc)
m1 <- glm(V2 ~ V3 + V4 + V5 + V6 + V7, data=df, family=b       inomial(link="logit"))
m1 <- glm(V2 ~ V3 + V4 + V5 + V6 + V7, data=df, family=b       inomial(link="logit"))
m1 <- glm(V2 ~ V3 + V4 + V5 + V6 + V7, data=df, family=binomial(link="logit"))
m1 <- glm(V2 ~ V3 + V4 + V5 + V6 + V7, data = bc, family=binomial(link="logit"))
?ifelse
m1$V2 <- ifelse(m1$V2 == "B", 0, 1)
m1 <- glm(V2 ~ V3 + V4 + V5 + V6 + V7, data = bc, family=binomial(link="logit"))
head(m1)
bc$V2 <- ifelse(bc$V2 == "B", 0, 1) 
head(bc)
m1 <- glm(V2 ~ V3 + V4 + V5 + V6 + V7, data = bc, family=binomial(link="logit"))
summary(bc$V2)
bc$V2 <- ifelse(bc$V2 == "B", "0", "1") 
bc <- read.table("dat/wdbc.data", sep = ",")
bc$V2 <- ifelse(bc$V2 == "B", "0", "1") 
summary(bc$V2)
bc <- read.table("dat/wdbc.data", sep = ",")
bc$V2 <- ifelse(bc$V2 == "B", 0, 1) 
bc
summary(bc$V2)
m1 <- glm(V2 ~ V3 + V4 + V5 + V6 + V7, data = bc, family=binomial(link="logit"))
m2 <- glm(V2 ~ V3 + V4 , data=df, family=binomial(link="logit"))
m2 <- glm(V2 ~ V3 + V4 , data=bc, family=binomial(link="logit"))
summary(m1)
summary(m2)
m3 <- glm(V2 ~ V5 + V6 + V7, data=bc, family=binomial(link="logit"))
 m4 <- glm(V2 ~ V4 + V5 + V6 + V7, data=bc, family=binomial(link="logit")
)
summary(m3)
summary(m4)
summary(m1)
summary(m2)
summary(m2)
summary(bc)
 test <- data.frame(V3 = c(7, 9, 11), V4 = c(6, 11, 12))
predict(m2, test)
summary(m2)
predict(m2, test)
?predict
predict(m2, test, type = "response")
test <- data.frame(V3 = c(7, 9, 220), V4 = c(6, 11, 12))
predict(m2, test, type = "response")
summary(m2)
predicted(m2)
summary(m2)
predicted
install.packages("arm")
library(arm)
display(m2)
predict(m2)
error.rate <- mean ((predicted>0.5 & bc$v2==0) | (predicted  <.5 & bc$V2==1))
predicted <- predict(m2)
error.rate <- mean ((predicted>0.5 & bc$v2==0) | (predicted  <.5 & bc$V2==1))
error.rate
error.rate <- mean ((predicted>0.5 & bc$V2==0) | (predicted  <.5 & bc$V2==1))
error.rate
predicted_null <- seq(0.5, nrow(bc)
)
null.rate <- mean ((predicted_null>0.5 & bc$v2==0) | (predicted_null<.5 & bc$V2==1))
null.rate
null.rate <- mean ((predicted_null>0.5 & bc$V2==0) | (predicted_null<.5 & bc$V2==1))
null.rate
predicted_null <- seq(mean(bc$V2), nrow(bc)
)
mean(bc$V2)
null.rate <- mean ((predicted_null>0.5 & bc$V2==0) | (predicted_null<.5 & bc$V2==1))
null.rate
